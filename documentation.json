{
    "pipes": [],
    "interfaces": [
        {
            "name": "ExcitationElement",
            "id": "interface-ExcitationElement-de9d6d5bb98976373f6361beb92a3be69b594e03beec3ecfb41236ed5a2364e21c928f41db0182b8309c0efccca3398f5f008af8f40aae41b6fc3e2e102eecc6",
            "file": "src/app/engine.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ElementRef, Injectable, NgZone } from '@angular/core';\r\n\r\nimport { ArcRotateCamera } from '@babylonjs/core/Cameras/arcRotateCamera';\r\nimport { Angle } from '@babylonjs/core/Maths/math.path';\r\nimport { Engine } from '@babylonjs/core/Engines/engine';\r\nimport { HemisphericLight } from '@babylonjs/core/Lights/hemisphericLight';\r\nimport { Matrix, Vector3 } from '@babylonjs/core/Maths/math.vector';\r\nimport { Mesh } from '@babylonjs/core/Meshes/mesh';\r\nimport '@babylonjs/core/Meshes/thinInstanceMesh'\r\nimport { Plane } from '@babylonjs/core/Maths/math.plane';\r\nimport { CreatePlane } from '@babylonjs/core/Meshes/Builders/planeBuilder';\r\nimport { Scene } from '@babylonjs/core/scene';\r\nimport { AbstractMesh  } from '@babylonjs/core/Meshes/abstractMesh';\r\nimport { UniformBuffer } from '@babylonjs/core/Materials/uniformBuffer';\r\n\r\n\r\nimport { BehaviorSubject, combineLatest } from 'rxjs';\r\nimport { RayleighMaterial } from './materials/rayleigh.material';\r\nimport { TransducerMaterial } from './materials/transducer.material';\r\n\r\n\r\nexport interface Transducer {\r\n  name: string;\r\n  pos: Vector3;\r\n  enabled: boolean;\r\n  selected: boolean;\r\n}\r\n\r\nexport interface ExcitationElement {\r\n  pos: Vector3;\r\n  phase: number;\r\n  amplitude: number;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EngineService {\r\n  engine: Engine;\r\n  private scene: Scene;\r\n\r\n  private transducerMaterial: TransducerMaterial;\r\n  private rayleighMaterial: RayleighMaterial;\r\n\r\n  private transducerPrototype: Mesh;\r\n\r\n  private speedOfSoundSubject: BehaviorSubject<number> = new BehaviorSubject(343);\r\n  public speedOfSound$ = this.speedOfSoundSubject.asObservable();\r\n  \r\n  private transducersSubject = new BehaviorSubject<Array<Transducer>>([]);\r\n  public transducers$ = this.transducersSubject.asObservable();\r\n\r\n  constructor(private ngZone: NgZone) {}\r\n\r\n  initEngine(canvas: ElementRef<HTMLCanvasElement>) {\r\n    this.engine = new Engine(canvas.nativeElement, true);\r\n    this.scene = this.createScene(canvas);\r\n  }\r\n\r\n  createScene(canvas: ElementRef<HTMLCanvasElement>) {\r\n    let scene = new Scene(this.engine);\r\n    let camera = new ArcRotateCamera(\"Camera\", Math.PI / 4, Math.PI / 4, 4, Vector3.Zero(), scene);\r\n    camera.lowerRadiusLimit = 0.01;\r\n    camera.attachControl(canvas, true);\r\n    camera.minZ = 0.001;\r\n    camera.inertia = 0;\r\n\r\n    let light = new HemisphericLight(\"light1\", new Vector3(0, 1, 0), scene);\r\n\r\n    // Setup Aperture\r\n    const origin = new Vector3(0, 0, 0);\r\n    const zPositive = new Vector3(0, 0, 1);\r\n    const yPositive = new Vector3(0, 1, 0);\r\n    const aperturePlane = Plane.FromPositionAndNormal(origin, zPositive);\r\n\r\n    const transducerDiameter = 0.0034;\r\n\r\n    // Transducer\r\n    this.transducerMaterial = new TransducerMaterial(scene);\r\n\r\n    const apertureOptions = {\r\n      sourcePlane: aperturePlane,\r\n      size: transducerDiameter\r\n    };\r\n\r\n    this.transducerPrototype = CreatePlane('plane', apertureOptions, scene);\r\n    this.transducerPrototype.material = this.transducerMaterial;\r\n\r\n    // Result\r\n    this.rayleighMaterial = new RayleighMaterial(scene);\r\n\r\n    // Setup result plane\r\n    const resultPlane = Plane.FromPositionAndNormal(origin, yPositive);\r\n    const planeOptions = {\r\n      sourcePlane: resultPlane\r\n    };\r\n\r\n    const plane = CreatePlane('plane', planeOptions, scene)\r\n    plane.material = this.rayleighMaterial;\r\n    plane.position = new Vector3(0, 0, .5);\r\n    plane.bakeCurrentTransformIntoVertices();\r\n\r\n    let phase = 0;\r\n    scene.registerBeforeRender(() => {\r\n      this.transducerMaterial.setFloat('globalPhase', Angle.FromDegrees(phase).radians());\r\n      this.rayleighMaterial.setFloat('globalPhase', Angle.FromDegrees(phase).radians());\r\n      this.rayleighMaterial.setFloat('t', Angle.FromDegrees(phase).radians());\r\n\r\n      phase += 6;\r\n      phase %= 360;\r\n    });\r\n\r\n    const excitationBuffer = new UniformBuffer(this.engine);\r\n    // Unclear why we need to pass 16 here, 2x vec4 should be either\r\n    // 1) 8 -> if a float counts as 1\r\n    // 2) 32 -> if a float counts as 4: 2*4*4 \r\n    excitationBuffer.addUniform('elements', 4, this.transducersSubject.value.length * 2);\r\n\r\n    this.rayleighMaterial.onBind = ((mesh:AbstractMesh) => {\r\n      this.rayleighMaterial.getEffect().bindUniformBuffer(excitationBuffer.getBuffer()!, 'excitation');\r\n    })\r\n    \r\n    combineLatest([this.speedOfSound$, this.transducers$]).subscribe(\r\n      ([speedOfSound, transducers]) => {\r\n\r\n        this.rayleighMaterial.setInt('numElements', this.transducersSubject.value.length);\r\n      \r\n        const omega = 2.0 * Math.PI * 40000;\r\n        \r\n        this.rayleighMaterial.setFloat('omega', omega);\r\n        this.rayleighMaterial.setFloat('k', omega / speedOfSound);\r\n        \r\n        this.rayleighMaterial.setInt('viewmode', 0);\r\n        this.rayleighMaterial.setFloat('dynamicRange', 10);\r\n    \r\n        const elementSize = 8;\r\n\r\n        const buffers = transducers.reduce((buffer, transducer, index) => {\r\n          Matrix.Translation(\r\n            transducer.pos.x, \r\n            transducer.pos.y, \r\n            transducer.pos.z\r\n          ).copyToArray(buffer.matrixBuffer, index * 16);\r\n\r\n          const elementOffset = elementSize * index;\r\n          transducer.pos.toArray(buffer.excitationBuffer, elementOffset);\r\n          \r\n          buffer.excitationBuffer[elementOffset + 4] = 1; // amplitude\r\n          buffer.excitationBuffer[elementOffset + 5] = 1; // area\r\n          buffer.excitationBuffer[elementOffset + 6] = 0; // phase\r\n          buffer.excitationBuffer[elementOffset + 7] = 0; // zero  \r\n\r\n          return buffer;\r\n        }, { \r\n          matrixBuffer: new Float32Array(16 * transducers.length),\r\n          excitationBuffer: new Float32Array(elementSize * transducers.length) \r\n        } );\r\n\r\n        this.transducerPrototype.thinInstanceSetBuffer('matrix', buffers.matrixBuffer, 16, false);\r\n        excitationBuffer.updateUniformArray('elements', buffers.excitationBuffer, buffers.excitationBuffer.length);\r\n        excitationBuffer.update();\r\n      });\r\n    return scene;\r\n  }\r\n\r\n  start() {\r\n\r\n    // ... you can add content to the Scene\r\n\r\n    // ignore the change events from the Engine in the Angular ngZone\r\n    this.ngZone.runOutsideAngular(() => {\r\n      // start the render loop and therefore start the Engine\r\n      this.engine.runRenderLoop(() => this.scene.render())\r\n    });\r\n  }\r\n\r\n  setTransducerPositions(positions: Array<Transducer>) {\r\n    this.transducersSubject.next(positions);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "amplitude",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "phase",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "pos",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Vector3",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Transducer",
            "id": "interface-Transducer-de9d6d5bb98976373f6361beb92a3be69b594e03beec3ecfb41236ed5a2364e21c928f41db0182b8309c0efccca3398f5f008af8f40aae41b6fc3e2e102eecc6",
            "file": "src/app/engine.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ElementRef, Injectable, NgZone } from '@angular/core';\r\n\r\nimport { ArcRotateCamera } from '@babylonjs/core/Cameras/arcRotateCamera';\r\nimport { Angle } from '@babylonjs/core/Maths/math.path';\r\nimport { Engine } from '@babylonjs/core/Engines/engine';\r\nimport { HemisphericLight } from '@babylonjs/core/Lights/hemisphericLight';\r\nimport { Matrix, Vector3 } from '@babylonjs/core/Maths/math.vector';\r\nimport { Mesh } from '@babylonjs/core/Meshes/mesh';\r\nimport '@babylonjs/core/Meshes/thinInstanceMesh'\r\nimport { Plane } from '@babylonjs/core/Maths/math.plane';\r\nimport { CreatePlane } from '@babylonjs/core/Meshes/Builders/planeBuilder';\r\nimport { Scene } from '@babylonjs/core/scene';\r\nimport { AbstractMesh  } from '@babylonjs/core/Meshes/abstractMesh';\r\nimport { UniformBuffer } from '@babylonjs/core/Materials/uniformBuffer';\r\n\r\n\r\nimport { BehaviorSubject, combineLatest } from 'rxjs';\r\nimport { RayleighMaterial } from './materials/rayleigh.material';\r\nimport { TransducerMaterial } from './materials/transducer.material';\r\n\r\n\r\nexport interface Transducer {\r\n  name: string;\r\n  pos: Vector3;\r\n  enabled: boolean;\r\n  selected: boolean;\r\n}\r\n\r\nexport interface ExcitationElement {\r\n  pos: Vector3;\r\n  phase: number;\r\n  amplitude: number;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EngineService {\r\n  engine: Engine;\r\n  private scene: Scene;\r\n\r\n  private transducerMaterial: TransducerMaterial;\r\n  private rayleighMaterial: RayleighMaterial;\r\n\r\n  private transducerPrototype: Mesh;\r\n\r\n  private speedOfSoundSubject: BehaviorSubject<number> = new BehaviorSubject(343);\r\n  public speedOfSound$ = this.speedOfSoundSubject.asObservable();\r\n  \r\n  private transducersSubject = new BehaviorSubject<Array<Transducer>>([]);\r\n  public transducers$ = this.transducersSubject.asObservable();\r\n\r\n  constructor(private ngZone: NgZone) {}\r\n\r\n  initEngine(canvas: ElementRef<HTMLCanvasElement>) {\r\n    this.engine = new Engine(canvas.nativeElement, true);\r\n    this.scene = this.createScene(canvas);\r\n  }\r\n\r\n  createScene(canvas: ElementRef<HTMLCanvasElement>) {\r\n    let scene = new Scene(this.engine);\r\n    let camera = new ArcRotateCamera(\"Camera\", Math.PI / 4, Math.PI / 4, 4, Vector3.Zero(), scene);\r\n    camera.lowerRadiusLimit = 0.01;\r\n    camera.attachControl(canvas, true);\r\n    camera.minZ = 0.001;\r\n    camera.inertia = 0;\r\n\r\n    let light = new HemisphericLight(\"light1\", new Vector3(0, 1, 0), scene);\r\n\r\n    // Setup Aperture\r\n    const origin = new Vector3(0, 0, 0);\r\n    const zPositive = new Vector3(0, 0, 1);\r\n    const yPositive = new Vector3(0, 1, 0);\r\n    const aperturePlane = Plane.FromPositionAndNormal(origin, zPositive);\r\n\r\n    const transducerDiameter = 0.0034;\r\n\r\n    // Transducer\r\n    this.transducerMaterial = new TransducerMaterial(scene);\r\n\r\n    const apertureOptions = {\r\n      sourcePlane: aperturePlane,\r\n      size: transducerDiameter\r\n    };\r\n\r\n    this.transducerPrototype = CreatePlane('plane', apertureOptions, scene);\r\n    this.transducerPrototype.material = this.transducerMaterial;\r\n\r\n    // Result\r\n    this.rayleighMaterial = new RayleighMaterial(scene);\r\n\r\n    // Setup result plane\r\n    const resultPlane = Plane.FromPositionAndNormal(origin, yPositive);\r\n    const planeOptions = {\r\n      sourcePlane: resultPlane\r\n    };\r\n\r\n    const plane = CreatePlane('plane', planeOptions, scene)\r\n    plane.material = this.rayleighMaterial;\r\n    plane.position = new Vector3(0, 0, .5);\r\n    plane.bakeCurrentTransformIntoVertices();\r\n\r\n    let phase = 0;\r\n    scene.registerBeforeRender(() => {\r\n      this.transducerMaterial.setFloat('globalPhase', Angle.FromDegrees(phase).radians());\r\n      this.rayleighMaterial.setFloat('globalPhase', Angle.FromDegrees(phase).radians());\r\n      this.rayleighMaterial.setFloat('t', Angle.FromDegrees(phase).radians());\r\n\r\n      phase += 6;\r\n      phase %= 360;\r\n    });\r\n\r\n    const excitationBuffer = new UniformBuffer(this.engine);\r\n    // Unclear why we need to pass 16 here, 2x vec4 should be either\r\n    // 1) 8 -> if a float counts as 1\r\n    // 2) 32 -> if a float counts as 4: 2*4*4 \r\n    excitationBuffer.addUniform('elements', 4, this.transducersSubject.value.length * 2);\r\n\r\n    this.rayleighMaterial.onBind = ((mesh:AbstractMesh) => {\r\n      this.rayleighMaterial.getEffect().bindUniformBuffer(excitationBuffer.getBuffer()!, 'excitation');\r\n    })\r\n    \r\n    combineLatest([this.speedOfSound$, this.transducers$]).subscribe(\r\n      ([speedOfSound, transducers]) => {\r\n\r\n        this.rayleighMaterial.setInt('numElements', this.transducersSubject.value.length);\r\n      \r\n        const omega = 2.0 * Math.PI * 40000;\r\n        \r\n        this.rayleighMaterial.setFloat('omega', omega);\r\n        this.rayleighMaterial.setFloat('k', omega / speedOfSound);\r\n        \r\n        this.rayleighMaterial.setInt('viewmode', 0);\r\n        this.rayleighMaterial.setFloat('dynamicRange', 10);\r\n    \r\n        const elementSize = 8;\r\n\r\n        const buffers = transducers.reduce((buffer, transducer, index) => {\r\n          Matrix.Translation(\r\n            transducer.pos.x, \r\n            transducer.pos.y, \r\n            transducer.pos.z\r\n          ).copyToArray(buffer.matrixBuffer, index * 16);\r\n\r\n          const elementOffset = elementSize * index;\r\n          transducer.pos.toArray(buffer.excitationBuffer, elementOffset);\r\n          \r\n          buffer.excitationBuffer[elementOffset + 4] = 1; // amplitude\r\n          buffer.excitationBuffer[elementOffset + 5] = 1; // area\r\n          buffer.excitationBuffer[elementOffset + 6] = 0; // phase\r\n          buffer.excitationBuffer[elementOffset + 7] = 0; // zero  \r\n\r\n          return buffer;\r\n        }, { \r\n          matrixBuffer: new Float32Array(16 * transducers.length),\r\n          excitationBuffer: new Float32Array(elementSize * transducers.length) \r\n        } );\r\n\r\n        this.transducerPrototype.thinInstanceSetBuffer('matrix', buffers.matrixBuffer, 16, false);\r\n        excitationBuffer.updateUniformArray('elements', buffers.excitationBuffer, buffers.excitationBuffer.length);\r\n        excitationBuffer.update();\r\n      });\r\n    return scene;\r\n  }\r\n\r\n  start() {\r\n\r\n    // ... you can add content to the Scene\r\n\r\n    // ignore the change events from the Engine in the Angular ngZone\r\n    this.ngZone.runOutsideAngular(() => {\r\n      // start the render loop and therefore start the Engine\r\n      this.engine.runRenderLoop(() => this.scene.render())\r\n    });\r\n  }\r\n\r\n  setTransducerPositions(positions: Array<Transducer>) {\r\n    this.transducersSubject.next(positions);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "enabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "pos",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Vector3",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "EngineService",
            "id": "injectable-EngineService-de9d6d5bb98976373f6361beb92a3be69b594e03beec3ecfb41236ed5a2364e21c928f41db0182b8309c0efccca3398f5f008af8f40aae41b6fc3e2e102eecc6",
            "file": "src/app/engine.service.ts",
            "properties": [
                {
                    "name": "engine",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Engine",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "rayleighMaterial",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RayleighMaterial",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "scene",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Scene",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "speedOfSound$",
                    "defaultValue": "this.speedOfSoundSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "speedOfSoundSubject",
                    "defaultValue": "new BehaviorSubject(343)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<number>",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "transducerMaterial",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransducerMaterial",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "transducerPrototype",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Mesh",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "transducers$",
                    "defaultValue": "this.transducersSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "transducersSubject",
                    "defaultValue": "new BehaviorSubject<Array<Transducer>>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createScene",
                    "args": [
                        {
                            "name": "canvas",
                            "type": "ElementRef<HTMLCanvasElement>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "canvas",
                            "type": "ElementRef<HTMLCanvasElement>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initEngine",
                    "args": [
                        {
                            "name": "canvas",
                            "type": "ElementRef<HTMLCanvasElement>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "canvas",
                            "type": "ElementRef<HTMLCanvasElement>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTransducerPositions",
                    "args": [
                        {
                            "name": "positions",
                            "type": "Array<Transducer>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "positions",
                            "type": "Array<Transducer>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "start",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { ElementRef, Injectable, NgZone } from '@angular/core';\r\n\r\nimport { ArcRotateCamera } from '@babylonjs/core/Cameras/arcRotateCamera';\r\nimport { Angle } from '@babylonjs/core/Maths/math.path';\r\nimport { Engine } from '@babylonjs/core/Engines/engine';\r\nimport { HemisphericLight } from '@babylonjs/core/Lights/hemisphericLight';\r\nimport { Matrix, Vector3 } from '@babylonjs/core/Maths/math.vector';\r\nimport { Mesh } from '@babylonjs/core/Meshes/mesh';\r\nimport '@babylonjs/core/Meshes/thinInstanceMesh'\r\nimport { Plane } from '@babylonjs/core/Maths/math.plane';\r\nimport { CreatePlane } from '@babylonjs/core/Meshes/Builders/planeBuilder';\r\nimport { Scene } from '@babylonjs/core/scene';\r\nimport { AbstractMesh  } from '@babylonjs/core/Meshes/abstractMesh';\r\nimport { UniformBuffer } from '@babylonjs/core/Materials/uniformBuffer';\r\n\r\n\r\nimport { BehaviorSubject, combineLatest } from 'rxjs';\r\nimport { RayleighMaterial } from './materials/rayleigh.material';\r\nimport { TransducerMaterial } from './materials/transducer.material';\r\n\r\n\r\nexport interface Transducer {\r\n  name: string;\r\n  pos: Vector3;\r\n  enabled: boolean;\r\n  selected: boolean;\r\n}\r\n\r\nexport interface ExcitationElement {\r\n  pos: Vector3;\r\n  phase: number;\r\n  amplitude: number;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EngineService {\r\n  engine: Engine;\r\n  private scene: Scene;\r\n\r\n  private transducerMaterial: TransducerMaterial;\r\n  private rayleighMaterial: RayleighMaterial;\r\n\r\n  private transducerPrototype: Mesh;\r\n\r\n  private speedOfSoundSubject: BehaviorSubject<number> = new BehaviorSubject(343);\r\n  public speedOfSound$ = this.speedOfSoundSubject.asObservable();\r\n  \r\n  private transducersSubject = new BehaviorSubject<Array<Transducer>>([]);\r\n  public transducers$ = this.transducersSubject.asObservable();\r\n\r\n  constructor(private ngZone: NgZone) {}\r\n\r\n  initEngine(canvas: ElementRef<HTMLCanvasElement>) {\r\n    this.engine = new Engine(canvas.nativeElement, true);\r\n    this.scene = this.createScene(canvas);\r\n  }\r\n\r\n  createScene(canvas: ElementRef<HTMLCanvasElement>) {\r\n    let scene = new Scene(this.engine);\r\n    let camera = new ArcRotateCamera(\"Camera\", Math.PI / 4, Math.PI / 4, 4, Vector3.Zero(), scene);\r\n    camera.lowerRadiusLimit = 0.01;\r\n    camera.attachControl(canvas, true);\r\n    camera.minZ = 0.001;\r\n    camera.inertia = 0;\r\n\r\n    let light = new HemisphericLight(\"light1\", new Vector3(0, 1, 0), scene);\r\n\r\n    // Setup Aperture\r\n    const origin = new Vector3(0, 0, 0);\r\n    const zPositive = new Vector3(0, 0, 1);\r\n    const yPositive = new Vector3(0, 1, 0);\r\n    const aperturePlane = Plane.FromPositionAndNormal(origin, zPositive);\r\n\r\n    const transducerDiameter = 0.0034;\r\n\r\n    // Transducer\r\n    this.transducerMaterial = new TransducerMaterial(scene);\r\n\r\n    const apertureOptions = {\r\n      sourcePlane: aperturePlane,\r\n      size: transducerDiameter\r\n    };\r\n\r\n    this.transducerPrototype = CreatePlane('plane', apertureOptions, scene);\r\n    this.transducerPrototype.material = this.transducerMaterial;\r\n\r\n    // Result\r\n    this.rayleighMaterial = new RayleighMaterial(scene);\r\n\r\n    // Setup result plane\r\n    const resultPlane = Plane.FromPositionAndNormal(origin, yPositive);\r\n    const planeOptions = {\r\n      sourcePlane: resultPlane\r\n    };\r\n\r\n    const plane = CreatePlane('plane', planeOptions, scene)\r\n    plane.material = this.rayleighMaterial;\r\n    plane.position = new Vector3(0, 0, .5);\r\n    plane.bakeCurrentTransformIntoVertices();\r\n\r\n    let phase = 0;\r\n    scene.registerBeforeRender(() => {\r\n      this.transducerMaterial.setFloat('globalPhase', Angle.FromDegrees(phase).radians());\r\n      this.rayleighMaterial.setFloat('globalPhase', Angle.FromDegrees(phase).radians());\r\n      this.rayleighMaterial.setFloat('t', Angle.FromDegrees(phase).radians());\r\n\r\n      phase += 6;\r\n      phase %= 360;\r\n    });\r\n\r\n    const excitationBuffer = new UniformBuffer(this.engine);\r\n    // Unclear why we need to pass 16 here, 2x vec4 should be either\r\n    // 1) 8 -> if a float counts as 1\r\n    // 2) 32 -> if a float counts as 4: 2*4*4 \r\n    excitationBuffer.addUniform('elements', 4, this.transducersSubject.value.length * 2);\r\n\r\n    this.rayleighMaterial.onBind = ((mesh:AbstractMesh) => {\r\n      this.rayleighMaterial.getEffect().bindUniformBuffer(excitationBuffer.getBuffer()!, 'excitation');\r\n    })\r\n    \r\n    combineLatest([this.speedOfSound$, this.transducers$]).subscribe(\r\n      ([speedOfSound, transducers]) => {\r\n\r\n        this.rayleighMaterial.setInt('numElements', this.transducersSubject.value.length);\r\n      \r\n        const omega = 2.0 * Math.PI * 40000;\r\n        \r\n        this.rayleighMaterial.setFloat('omega', omega);\r\n        this.rayleighMaterial.setFloat('k', omega / speedOfSound);\r\n        \r\n        this.rayleighMaterial.setInt('viewmode', 0);\r\n        this.rayleighMaterial.setFloat('dynamicRange', 10);\r\n    \r\n        const elementSize = 8;\r\n\r\n        const buffers = transducers.reduce((buffer, transducer, index) => {\r\n          Matrix.Translation(\r\n            transducer.pos.x, \r\n            transducer.pos.y, \r\n            transducer.pos.z\r\n          ).copyToArray(buffer.matrixBuffer, index * 16);\r\n\r\n          const elementOffset = elementSize * index;\r\n          transducer.pos.toArray(buffer.excitationBuffer, elementOffset);\r\n          \r\n          buffer.excitationBuffer[elementOffset + 4] = 1; // amplitude\r\n          buffer.excitationBuffer[elementOffset + 5] = 1; // area\r\n          buffer.excitationBuffer[elementOffset + 6] = 0; // phase\r\n          buffer.excitationBuffer[elementOffset + 7] = 0; // zero  \r\n\r\n          return buffer;\r\n        }, { \r\n          matrixBuffer: new Float32Array(16 * transducers.length),\r\n          excitationBuffer: new Float32Array(elementSize * transducers.length) \r\n        } );\r\n\r\n        this.transducerPrototype.thinInstanceSetBuffer('matrix', buffers.matrixBuffer, 16, false);\r\n        excitationBuffer.updateUniformArray('elements', buffers.excitationBuffer, buffers.excitationBuffer.length);\r\n        excitationBuffer.update();\r\n      });\r\n    return scene;\r\n  }\r\n\r\n  start() {\r\n\r\n    // ... you can add content to the Scene\r\n\r\n    // ignore the change events from the Engine in the Angular ngZone\r\n    this.ngZone.runOutsideAngular(() => {\r\n      // start the render loop and therefore start the Engine\r\n      this.engine.runRenderLoop(() => this.scene.render())\r\n    });\r\n  }\r\n\r\n  setTransducerPositions(positions: Array<Transducer>) {\r\n    this.transducersSubject.next(positions);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "RayleighMaterial",
            "id": "class-RayleighMaterial-b445ef249379d6e717886883465d96759275718d60cb5cd2cb02b89cab7e71dafadab63190ebc852327f9b06a91448bc405ccc527e4e7c25cbf7d147fb1f10d8",
            "file": "src/app/materials/rayleigh.material.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Texture } from '@babylonjs/core/Materials/Textures/texture';\r\nimport { Scene } from '@babylonjs/core/scene';\r\nimport { ShaderMaterial } from '@babylonjs/core/Materials/shaderMaterial';\r\n\r\nconst glsl = (x: TemplateStringsArray) => x;\r\n\r\nconst rayleighVertexShaderCode = glsl`\r\n  precision highp float;\r\n\r\n  // Uniforms\r\n  uniform mat4 worldViewProjection;\r\n\r\n  // Attributes\r\n  attribute vec3 position;\r\n\r\n  // Varying\r\n  out highp vec3 r;\r\n\r\n  void main(void) {\r\n    gl_Position = worldViewProjection * vec4(position, 1.0);\r\n    r = position;\r\n  }\r\n`;\r\nconst rayleighFragmentShaderCode = glsl`\r\n  precision highp float;\r\n\r\n  uniform sampler2D coolwarmSampler;\r\n  uniform float globalPhase;\r\n\r\n  uniform float k;\r\n  uniform float t;\r\n  uniform float omega;\r\n\r\n  uniform int viewmode;\r\n  uniform float dynamicRange;\r\n\r\n  struct ExcitationElement { // size per element: 8\r\n    vec4 position; // offset 0\r\n    vec4 phasor; // 0: amplitude, 1: area, 2: delay, 3: dummy // Offset  16\r\n  };\r\n\r\n  uniform int numElements;\r\n\r\n  layout(std140) uniform ExcitationBuffer\r\n  {\r\n    ExcitationElement elements[4];\r\n  } excitation;\r\n\r\n  in highp vec3 r;\r\n\r\n  void main(void) {\r\n    vec2 elongation = vec2(0,0); // Complex number\r\n\r\n    for (int j = 0; j < numElements; ++j) {\r\n      ExcitationElement elm = excitation.elements[j];\r\n      float d = distance(elm.position.xyz, r);\r\n      float oodd = 1.0/pow(d,2.0);\r\n\r\n      float amplitude = elm.phasor.x;\r\n      float area = elm.phasor.y;\r\n      float delay = elm.phasor.z;\r\n      \r\n      float argz = (d*k - delay*omega - t);\r\n      elongation += vec2(cos(argz), sin(argz))*amplitude*area*oodd;\r\n    } \r\n  \r\n    glFragColor = vec4(.5 + elongation.x, .5-elongation.x, 0.5,1);\r\n\r\n    // float intensity;\r\n    // if (viewmode == 0) { // Elongation\r\n    //   intensity = 0.5 + (.5*elongation.x + .25) / (float(numElements)*dynamicRange);\r\n    //   glFragColor = texture(coolwarmSampler, vec2(intensity, 0.375));\r\n    // } else if (viewmode == 1) { // Magnitude\r\n    //   //intensity = 0.25*length(elongation) / numsources;\r\n    //   intensity = log(length(elongation) / float(numElements))/log(10.0f);\r\n    //   glFragColor = texture(coolwarmSampler, vec2(intensity, 1));\r\n    // } else if (viewmode == 2) { // Phase\r\n    //   intensity = (atan(elongation.y,elongation.x)/(3.14) + .25);\r\n    //   glFragColor = texture(coolwarmSampler, vec2(intensity, 1));\r\n    // }\r\n  }\r\n`;\r\n\r\nexport class RayleighMaterial extends ShaderMaterial {\r\n  constructor(scene: Scene) {\r\n    super('RayleighMaterial', scene, {\r\n      vertexSource: rayleighVertexShaderCode,\r\n      fragmentSource: rayleighFragmentShaderCode\r\n    }, {\r\n      attributes: [\r\n        \"position\",\r\n        \"normal\",\r\n        \"uv\",\r\n        'world0',\r\n        'world1',\r\n        'world2',\r\n        'world3',\r\n      ],\r\n      uniforms: [\r\n        'excitation',\r\n        \"world\",\r\n        \"worldView\",\r\n        \"worldViewProjection\",\r\n        \"view\",\r\n        \"projection\",\r\n        \"globalPhase\",\r\n        \"k\",\r\n        \"t\",\r\n        \"omega\",\r\n        \"viewmode\",\r\n        \"dynamicRange\"\r\n      ],\r\n      uniformBuffers: [\r\n        'excitation'\r\n      ],\r\n      samplers: ['coolwarmSampler'],\r\n      defines: [\"#define INSTANCES\"]\r\n    });\r\n\r\n    this.backFaceCulling = false;\r\n    const coolWarmTexture = new Texture('assets/coolwarm.png', scene);\r\n    coolWarmTexture.wrapU = Texture.CLAMP_ADDRESSMODE;\r\n    this.setTexture('coolwarmSampler', coolWarmTexture);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "scene",
                        "type": "Scene",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 84,
                "jsdoctags": [
                    {
                        "name": "scene",
                        "type": "Scene",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "extends": "ShaderMaterial",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TransducerMaterial",
            "id": "class-TransducerMaterial-fb571546bdf42566b75c99ffcbe7d6e06f48854ba094300b758de89c510e40041e7fcd156e21f4f0a6744f8bc3bd9afa68be0e1a267e76217bbbe0e69e94e32e",
            "file": "src/app/materials/transducer.material.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Scene } from '@babylonjs/core/scene';\r\nimport { ShaderMaterial } from '@babylonjs/core/Materials/shaderMaterial';\r\n\r\nimport '@babylonjs/core/Shaders/ShadersInclude/instancesDeclaration'\r\nimport '@babylonjs/core/Shaders/ShadersInclude/instancesVertex'\r\n\r\nconst glsl = (x: TemplateStringsArray) => x;\r\n\r\nconst transducerVertexShaderCode = glsl`\r\n  precision highp float;\r\n\r\n  // Attributes\r\n  attribute vec3 position;\r\n  attribute vec2 uv;\r\n\r\n  #include<instancesDeclaration>\r\n\r\n  // Uniforms\r\n  uniform mat4 worldViewProjection;\r\n\r\n  // Varying\r\n  varying vec2 vUV;\r\n\r\n  void main(void) {\r\n  #include<instancesVertex>\r\n    gl_Position = worldViewProjection * finalWorld* vec4(position, 1.0);\r\n    vUV = uv;\r\n  }\r\n`;\r\n\r\nconst transducerFragmentShaderCode = glsl`\r\n  precision highp float;\r\n\r\n  varying vec2 vUV;\r\n\r\n  uniform sampler2D textureSampler;\r\n  uniform float globalPhase;\r\n  uniform float transducerDiameter;\r\n\r\n  void main(void) {\r\n    if (length(vUV - vec2(.5,.5)) > 0.5) {\r\n        discard;\r\n    }\r\n\r\n    gl_FragColor = vec4(0.5*(1.0 + sin(globalPhase)), 0, 0.5*(1.0 - sin(globalPhase)),1);\r\n  }\r\n`;\r\n\r\nexport class TransducerMaterial extends ShaderMaterial {\r\n  constructor(scene: Scene) {\r\n    super('TransducerMaterial', scene, {\r\n      vertexSource: transducerVertexShaderCode,\r\n      fragmentSource: transducerFragmentShaderCode\r\n    },\r\n      {\r\n        attributes: [\r\n          \"position\",\r\n          \"normal\",\r\n          \"uv\"\r\n        ],\r\n        uniforms: [\r\n          \"world\",\r\n          \"worldView\",\r\n          \"worldViewProjection\",\r\n          \"view\",\r\n          \"projection\",\r\n          \"parameter\",\r\n          \"transducerDiameter\"\r\n        ]\r\n      }\r\n    );\r\n    this.backFaceCulling = false;\r\n  }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "scene",
                        "type": "Scene",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "scene",
                        "type": "Scene",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "extends": "ShaderMaterial",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-d4852c3629448f9ba5553b1f1341716831703604a5587faccbecb236f403445bca123db67ce7ec5c1843085d83489510d76c0629e9172660d11912f9380d7f70",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'usarray'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'usarray';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".example-container {\r\n    position: absolute;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    background: #eee;\r\n  }\r\n  ",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<mat-sidenav-container class=\"example-container\">\n    <mat-sidenav mode=\"side\" opened>\n        <app-menu-left></app-menu-left>\n    </mat-sidenav>\n    <mat-sidenav-content>\n        <app-view3d></app-view3d>\n    </mat-sidenav-content>\n</mat-sidenav-container>\n<router-outlet></router-outlet>\n"
        },
        {
            "name": "MenuLeftComponent",
            "id": "component-MenuLeftComponent-31bce829b0fe620dec337325b51271fa775d5753565231dadfc9f87e1d40aa467e602a1a0cb99d1b2ddd2e5b15d33b2ba250f4becf70ffc8ccf4984934b26d6e",
            "file": "src/app/menu-left/menu-left.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-menu-left",
            "styleUrls": [
                "./menu-left.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./menu-left.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "arrayConfig",
                    "defaultValue": "this.fb.group({\r\n    arrayType: 'ura',\r\n    uraConfig: this.fb.group({\r\n      elementsX: this.fb.control(0),\r\n      elementsY: this.fb.control(0),\r\n      pitchX: this.fb.control(0),\r\n      pitchY: this.fb.control(0),\r\n    }),\r\n    circularConfig: this.fb.group({\r\n      radius: this.fb.control(0),\r\n      elements: this.fb.control(0),\r\n    }),\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "engineService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EngineService",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { Vector3 } from '@babylonjs/core/Maths/math.vector';\r\nimport { EngineService, Transducer } from '../engine.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-menu-left',\r\n  templateUrl: './menu-left.component.html',\r\n  styleUrls: ['./menu-left.component.css']\r\n})\r\nexport class MenuLeftComponent implements OnInit {\r\n  arrayConfig = this.fb.group({\r\n    arrayType: 'ura',\r\n    uraConfig: this.fb.group({\r\n      elementsX: this.fb.control(0),\r\n      elementsY: this.fb.control(0),\r\n      pitchX: this.fb.control(0),\r\n      pitchY: this.fb.control(0),\r\n    }),\r\n    circularConfig: this.fb.group({\r\n      radius: this.fb.control(0),\r\n      elements: this.fb.control(0),\r\n    }),\r\n  });\r\n\r\n  constructor(public engineService: EngineService, private fb: FormBuilder) { }\r\n\r\n  ngOnInit(): void {\r\n\r\n    // memleak\r\n    this.arrayConfig.valueChanges.subscribe(val => {\r\n      console.log(\"Array config update\");\r\n      const excitation : Array<Transducer> = [];\r\n      if (val.arrayType === 'ura') {\r\n        const countX: number = val.uraConfig.elementsX;\r\n        const countY: number = val.uraConfig.elementsY;\r\n        const pitchX: number = val.uraConfig.pitchX;\r\n        const pitchY: number = val.uraConfig.pitchY;\r\n\r\n        const sizeXH = (countX - 1) * pitchX / 2.0;\r\n        const sizeYH = (countY - 1) * pitchY / 2.0;\r\n\r\n        for (let x = 0; x < countX; x++) {\r\n          for (let y = 0; y < countY; y++) {\r\n            const xpos = -sizeXH + x * pitchX;\r\n            const ypos = -sizeYH + y * pitchY;\r\n            excitation.push({ \r\n              name: `Transducer ${y * countY + x}`,\r\n              pos: new Vector3(xpos, ypos), \r\n              enabled: false,\r\n              selected: false\r\n            });\r\n          }\r\n        }\r\n      }\r\n\r\n      this.engineService.setTransducerPositions(excitation);\r\n    });\r\n\r\n    this.arrayConfig.patchValue({\r\n      arrayType: 'ura',\r\n      uraConfig: {\r\n        elementsX: 2,\r\n        elementsY: 2,\r\n        pitchX: 0.043,\r\n        pitchY: 0.0043,\r\n      },\r\n      circularConfig: {\r\n        radius: 2,\r\n        elements: 2,\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-title {\r\n    margin-top: 3ex;\r\n    margin-left: 2ex;\r\n}",
                    "styleUrl": "./menu-left.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "engineService",
                        "type": "EngineService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "engineService",
                        "type": "EngineService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"mat-title\">Simulation setup</div>\r\n<mat-accordion>\r\n    <mat-expansion-panel hideToggle>\r\n        <mat-expansion-panel-header>\r\n            <mat-panel-title>\r\n                Environment\r\n            </mat-panel-title>\r\n        </mat-expansion-panel-header>\r\n        <p>Air, c = XXXX m/s</p>\r\n    </mat-expansion-panel>\r\n\r\n    <mat-expansion-panel hideToggle>\r\n        <mat-expansion-panel-header>\r\n            <mat-panel-title>\r\n                Array config\r\n            </mat-panel-title>\r\n        </mat-expansion-panel-header>\r\n        <form class=\"example-container\" [formGroup]=\"arrayConfig\">\r\n            <div>\r\n                <mat-button-toggle-group formControlName=\"arrayType\">\r\n                    <mat-button-toggle value=\"ura\">\r\n                        URA\r\n                        <mat-icon aria-hidden=\"false\" aria-label=\"URA\">square</mat-icon>\r\n                    </mat-button-toggle>\r\n                    <mat-button-toggle value=\"circular\">\r\n                        Circular\r\n                        <mat-icon aria-hidden=\"false\" aria-label=\"circular\">circle</mat-icon>\r\n                    </mat-button-toggle>\r\n                </mat-button-toggle-group>\r\n            </div>\r\n\r\n            <div formGroupName=\"uraConfig\" *ngIf=\"arrayConfig.controls['arrayType'].value === 'ura'\">\r\n                <div>Element count</div>\r\n                <div>\r\n                    <mat-form-field appearance=\"fill\">\r\n                        <mat-label>x</mat-label>\r\n                        <input matInput type=\"number\" formControlName=\"elementsX\" min=\"1\" max=\"16\">\r\n                        </mat-form-field>\r\n                </div>\r\n                <div>\r\n                    <mat-form-field appearance=\"fill\">\r\n                        <mat-label>y</mat-label>\r\n                        <input matInput type=\"number\" formControlName=\"elementsY\" min=\"1\" max=\"16\">\r\n                    </mat-form-field>\r\n                </div>\r\n                \r\n                <div>Element distance</div>\r\n                <div>\r\n                    <mat-form-field appearance=\"fill\">\r\n                        <mat-label>x</mat-label>\r\n                        <input matInput type=\"number\" formControlName=\"pitchX\" min=\"0\" max=\"1\" step=\"0.0001\">\r\n                    </mat-form-field>\r\n                \r\n                </div>\r\n                <div>\r\n                    <mat-form-field appearance=\"fill\">\r\n                        <mat-label>y</mat-label>\r\n                        <input matInput type=\"number\" formControlName=\"pitchY\" min=\"0\" max=\"1\" step=\"0.0001\">\r\n                        </mat-form-field>\r\n                </div>\r\n\r\n            </div>\r\n        </form>\r\n    </mat-expansion-panel>\r\n    <mat-expansion-panel hideToggle>\r\n        <mat-expansion-panel-header>\r\n            <mat-panel-title>\r\n                Beamforming\r\n            </mat-panel-title>\r\n        </mat-expansion-panel-header>\r\n        <p>Algorithm | Pick on plane</p>\r\n    </mat-expansion-panel>\r\n    <div class=\"mat-title\">Results</div>\r\n    <mat-accordion>\r\n\r\n        <mat-expansion-panel hideToggle>\r\n            <mat-expansion-panel-header>\r\n                <mat-panel-title>\r\n                    Tranducers\r\n                </mat-panel-title>\r\n                <mat-panel-description>\r\n                    4\r\n                </mat-panel-description>\r\n            </mat-expansion-panel-header>\r\n            <mat-selection-list #shoes [multiple]=\"false\">\r\n                <mat-list-option *ngFor=\"let transducer of engineService.transducers$ | async\">\r\n                    {{transducer.name}}\r\n                </mat-list-option>\r\n            </mat-selection-list>\r\n        </mat-expansion-panel>\r\n        <mat-expansion-panel hideToggle>\r\n            <mat-expansion-panel-header>\r\n                <mat-panel-title>\r\n                    Rayleigh integral\r\n                </mat-panel-title>\r\n            </mat-expansion-panel-header>\r\n            <p>Elongation | Amplitude | Phase</p>\r\n        </mat-expansion-panel>\r\n        <mat-expansion-panel hideToggle>\r\n            <mat-expansion-panel-header>\r\n                <mat-panel-title>\r\n                    Far field 3D\r\n                </mat-panel-title>\r\n            </mat-expansion-panel-header>\r\n            <p>Deform mesh | Logarithmic scale</p>\r\n        </mat-expansion-panel>\r\n    </mat-accordion>"
        },
        {
            "name": "ToolbarComponent",
            "id": "component-ToolbarComponent-fcd9e9f36af45767539924f536d96db30dcb43ff2e0e87a69d07f20e6f4ee2e2d4cceaef74fd33ce3205f9ef85fc5d73bbcdcfeb7468e7eb184154afdd3c4bdd",
            "file": "src/app/toolbar/toolbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-toolbar",
            "styleUrls": [
                "./toolbar.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./toolbar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-toolbar',\n  templateUrl: './toolbar.component.html',\n  styleUrls: ['./toolbar.component.css']\n})\nexport class ToolbarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n    \n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./toolbar.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>toolbar works!</p>\n"
        },
        {
            "name": "View3dComponent",
            "id": "component-View3dComponent-87f1d9f94967d450e08287180ae3f0aab8969a5987f6b69a6faff5e81ee554f9deae05baa3be4728c44815c7dce319ce9628d2e7cafca5ee2eeb019cff5a6bc4",
            "file": "src/app/view3d/view3d.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-view3d",
            "styleUrls": [
                "./view3d.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./view3d.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "canvasRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLCanvasElement>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'view3dcanvas', {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, ElementRef, ViewChild } from '@angular/core';\r\nimport { EngineService } from '../engine.service';\r\n\r\n@Component({\r\n  selector: 'app-view3d',\r\n  templateUrl: './view3d.component.html',\r\n  styleUrls: ['./view3d.component.css']\r\n})\r\nexport class View3dComponent implements AfterViewInit {\r\n  @ViewChild('view3dcanvas', { static: true })\r\n  canvasRef: ElementRef<HTMLCanvasElement>;\r\n\r\n  constructor(private readonly engineService: EngineService) { }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.engineService.initEngine(this.canvasRef);\r\n    this.engineService.start();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#canvaswrapper {\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n\r\ncanvas {\r\n    width: 100%;\r\n    height: 100%;\r\n}",
                    "styleUrl": "./view3d.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "engineService",
                        "type": "EngineService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "engineService",
                        "type": "EngineService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<div id=\"canvaswrapper\">\r\n    <canvas #view3dcanvas id=\"view3dcanvas\"></canvas>\r\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-a12d09860557ba0b7092172d45eb4dc092fee608e4edfc23164491d2f79a5618b2cad73788b2a27e500e0b99b65d57dce860dce357d3cf16c164fb916f194040",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MenuLeftComponent } from './menu-left/menu-left.component';\nimport { View3dComponent } from './view3d/view3d.component';\n\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { ToolbarComponent } from './toolbar/toolbar.component';\n\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MenuLeftComponent,\n    View3dComponent,\n    ToolbarComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MatButtonToggleModule,\n    MatExpansionModule,\n    MatFormFieldModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatSidenavModule,\n    ReactiveFormsModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "MenuLeftComponent"
                        },
                        {
                            "name": "ToolbarComponent"
                        },
                        {
                            "name": "View3dComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-78922b3ae99d2c5249b333980bd5afde1b120b2cc6fedfd41b8b2cc90f279797cb4b22e183bf7e1d1dfab8c6100e77e7812c110234d81f866f544f28a3e18b15",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "glsl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/materials/rayleigh.material.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(x: TemplateStringsArray) => x"
            },
            {
                "name": "glsl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/materials/transducer.material.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(x: TemplateStringsArray) => x"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/menu-left/menu-left.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/toolbar/toolbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "rayleighFragmentShaderCode",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/materials/rayleigh.material.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "glsl`\r\n  precision highp float;\r\n\r\n  uniform sampler2D coolwarmSampler;\r\n  uniform float globalPhase;\r\n\r\n  uniform float k;\r\n  uniform float t;\r\n  uniform float omega;\r\n\r\n  uniform int viewmode;\r\n  uniform float dynamicRange;\r\n\r\n  struct ExcitationElement { // size per element: 8\r\n    vec4 position; // offset 0\r\n    vec4 phasor; // 0: amplitude, 1: area, 2: delay, 3: dummy // Offset  16\r\n  };\r\n\r\n  uniform int numElements;\r\n\r\n  layout(std140) uniform ExcitationBuffer\r\n  {\r\n    ExcitationElement elements[4];\r\n  } excitation;\r\n\r\n  in highp vec3 r;\r\n\r\n  void main(void) {\r\n    vec2 elongation = vec2(0,0); // Complex number\r\n\r\n    for (int j = 0; j < numElements; ++j) {\r\n      ExcitationElement elm = excitation.elements[j];\r\n      float d = distance(elm.position.xyz, r);\r\n      float oodd = 1.0/pow(d,2.0);\r\n\r\n      float amplitude = elm.phasor.x;\r\n      float area = elm.phasor.y;\r\n      float delay = elm.phasor.z;\r\n      \r\n      float argz = (d*k - delay*omega - t);\r\n      elongation += vec2(cos(argz), sin(argz))*amplitude*area*oodd;\r\n    } \r\n  \r\n    glFragColor = vec4(.5 + elongation.x, .5-elongation.x, 0.5,1);\r\n\r\n    // float intensity;\r\n    // if (viewmode == 0) { // Elongation\r\n    //   intensity = 0.5 + (.5*elongation.x + .25) / (float(numElements)*dynamicRange);\r\n    //   glFragColor = texture(coolwarmSampler, vec2(intensity, 0.375));\r\n    // } else if (viewmode == 1) { // Magnitude\r\n    //   //intensity = 0.25*length(elongation) / numsources;\r\n    //   intensity = log(length(elongation) / float(numElements))/log(10.0f);\r\n    //   glFragColor = texture(coolwarmSampler, vec2(intensity, 1));\r\n    // } else if (viewmode == 2) { // Phase\r\n    //   intensity = (atan(elongation.y,elongation.x)/(3.14) + .25);\r\n    //   glFragColor = texture(coolwarmSampler, vec2(intensity, 1));\r\n    // }\r\n  }\r\n`"
            },
            {
                "name": "rayleighVertexShaderCode",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/materials/rayleigh.material.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "glsl`\r\n  precision highp float;\r\n\r\n  // Uniforms\r\n  uniform mat4 worldViewProjection;\r\n\r\n  // Attributes\r\n  attribute vec3 position;\r\n\r\n  // Varying\r\n  out highp vec3 r;\r\n\r\n  void main(void) {\r\n    gl_Position = worldViewProjection * vec4(position, 1.0);\r\n    r = position;\r\n  }\r\n`"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/menu-left/menu-left.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<MenuLeftComponent>",
                "defaultValue": "(args: MenuLeftComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/toolbar/toolbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ToolbarComponent>",
                "defaultValue": "(args: ToolbarComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "transducerFragmentShaderCode",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/materials/transducer.material.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "glsl`\r\n  precision highp float;\r\n\r\n  varying vec2 vUV;\r\n\r\n  uniform sampler2D textureSampler;\r\n  uniform float globalPhase;\r\n  uniform float transducerDiameter;\r\n\r\n  void main(void) {\r\n    if (length(vUV - vec2(.5,.5)) > 0.5) {\r\n        discard;\r\n    }\r\n\r\n    gl_FragColor = vec4(0.5*(1.0 + sin(globalPhase)), 0, 0.5*(1.0 - sin(globalPhase)),1);\r\n  }\r\n`"
            },
            {
                "name": "transducerVertexShaderCode",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/materials/transducer.material.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "glsl`\r\n  precision highp float;\r\n\r\n  // Attributes\r\n  attribute vec3 position;\r\n  attribute vec2 uv;\r\n\r\n  #include<instancesDeclaration>\r\n\r\n  // Uniforms\r\n  uniform mat4 worldViewProjection;\r\n\r\n  // Varying\r\n  varying vec2 vUV;\r\n\r\n  void main(void) {\r\n  #include<instancesVertex>\r\n    gl_Position = worldViewProjection * finalWorld* vec4(position, 1.0);\r\n    vUV = uv;\r\n  }\r\n`"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/app/materials/rayleigh.material.ts": [
                {
                    "name": "glsl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/materials/rayleigh.material.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(x: TemplateStringsArray) => x"
                },
                {
                    "name": "rayleighFragmentShaderCode",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/materials/rayleigh.material.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "glsl`\r\n  precision highp float;\r\n\r\n  uniform sampler2D coolwarmSampler;\r\n  uniform float globalPhase;\r\n\r\n  uniform float k;\r\n  uniform float t;\r\n  uniform float omega;\r\n\r\n  uniform int viewmode;\r\n  uniform float dynamicRange;\r\n\r\n  struct ExcitationElement { // size per element: 8\r\n    vec4 position; // offset 0\r\n    vec4 phasor; // 0: amplitude, 1: area, 2: delay, 3: dummy // Offset  16\r\n  };\r\n\r\n  uniform int numElements;\r\n\r\n  layout(std140) uniform ExcitationBuffer\r\n  {\r\n    ExcitationElement elements[4];\r\n  } excitation;\r\n\r\n  in highp vec3 r;\r\n\r\n  void main(void) {\r\n    vec2 elongation = vec2(0,0); // Complex number\r\n\r\n    for (int j = 0; j < numElements; ++j) {\r\n      ExcitationElement elm = excitation.elements[j];\r\n      float d = distance(elm.position.xyz, r);\r\n      float oodd = 1.0/pow(d,2.0);\r\n\r\n      float amplitude = elm.phasor.x;\r\n      float area = elm.phasor.y;\r\n      float delay = elm.phasor.z;\r\n      \r\n      float argz = (d*k - delay*omega - t);\r\n      elongation += vec2(cos(argz), sin(argz))*amplitude*area*oodd;\r\n    } \r\n  \r\n    glFragColor = vec4(.5 + elongation.x, .5-elongation.x, 0.5,1);\r\n\r\n    // float intensity;\r\n    // if (viewmode == 0) { // Elongation\r\n    //   intensity = 0.5 + (.5*elongation.x + .25) / (float(numElements)*dynamicRange);\r\n    //   glFragColor = texture(coolwarmSampler, vec2(intensity, 0.375));\r\n    // } else if (viewmode == 1) { // Magnitude\r\n    //   //intensity = 0.25*length(elongation) / numsources;\r\n    //   intensity = log(length(elongation) / float(numElements))/log(10.0f);\r\n    //   glFragColor = texture(coolwarmSampler, vec2(intensity, 1));\r\n    // } else if (viewmode == 2) { // Phase\r\n    //   intensity = (atan(elongation.y,elongation.x)/(3.14) + .25);\r\n    //   glFragColor = texture(coolwarmSampler, vec2(intensity, 1));\r\n    // }\r\n  }\r\n`"
                },
                {
                    "name": "rayleighVertexShaderCode",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/materials/rayleigh.material.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "glsl`\r\n  precision highp float;\r\n\r\n  // Uniforms\r\n  uniform mat4 worldViewProjection;\r\n\r\n  // Attributes\r\n  attribute vec3 position;\r\n\r\n  // Varying\r\n  out highp vec3 r;\r\n\r\n  void main(void) {\r\n    gl_Position = worldViewProjection * vec4(position, 1.0);\r\n    r = position;\r\n  }\r\n`"
                }
            ],
            "src/app/materials/transducer.material.ts": [
                {
                    "name": "glsl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/materials/transducer.material.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(x: TemplateStringsArray) => x"
                },
                {
                    "name": "transducerFragmentShaderCode",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/materials/transducer.material.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "glsl`\r\n  precision highp float;\r\n\r\n  varying vec2 vUV;\r\n\r\n  uniform sampler2D textureSampler;\r\n  uniform float globalPhase;\r\n  uniform float transducerDiameter;\r\n\r\n  void main(void) {\r\n    if (length(vUV - vec2(.5,.5)) > 0.5) {\r\n        discard;\r\n    }\r\n\r\n    gl_FragColor = vec4(0.5*(1.0 + sin(globalPhase)), 0, 0.5*(1.0 - sin(globalPhase)),1);\r\n  }\r\n`"
                },
                {
                    "name": "transducerVertexShaderCode",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/materials/transducer.material.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "glsl`\r\n  precision highp float;\r\n\r\n  // Attributes\r\n  attribute vec3 position;\r\n  attribute vec2 uv;\r\n\r\n  #include<instancesDeclaration>\r\n\r\n  // Uniforms\r\n  uniform mat4 worldViewProjection;\r\n\r\n  // Varying\r\n  varying vec2 vUV;\r\n\r\n  void main(void) {\r\n  #include<instancesVertex>\r\n    gl_Position = worldViewProjection * finalWorld* vec4(position, 1.0);\r\n    vUV = uv;\r\n  }\r\n`"
                }
            ],
            "src/app/menu-left/menu-left.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/menu-left/menu-left.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/menu-left/menu-left.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<MenuLeftComponent>",
                    "defaultValue": "(args: MenuLeftComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/app/toolbar/toolbar.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/toolbar/toolbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/toolbar/toolbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ToolbarComponent>",
                    "defaultValue": "(args: ToolbarComponent) => ({\r\n  props: args,\r\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/engine.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "EngineService",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/engine.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ExcitationElement",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/engine.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Transducer",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/materials/rayleigh.material.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RayleighMaterial",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/materials/rayleigh.material.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "glsl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/materials/rayleigh.material.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rayleighFragmentShaderCode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/materials/rayleigh.material.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rayleighVertexShaderCode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/materials/transducer.material.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TransducerMaterial",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/materials/transducer.material.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "glsl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/materials/transducer.material.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "transducerFragmentShaderCode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/materials/transducer.material.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "transducerVertexShaderCode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/menu-left/menu-left.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuLeftComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/menu-left/menu-left.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/menu-left/menu-left.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/toolbar/toolbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToolbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/toolbar/toolbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/toolbar/toolbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/view3d/view3d.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "View3dComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}